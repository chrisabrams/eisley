{"version":3,"sources":["../../src/validate/string.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;IAKM,e;;;AAEJ,2BAAY,CAAZ,EAA6B;AAAA;;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AAAA;;AAAA,mGACrB,CADqB,EAClB,OADkB;;AAG3B,kBAAO,MAAK,QAAL,EAAP;AACD;;;;;;;;;;+BAMU;;AAET,UAAI,QAAS,IAAb;AAAA,UACI,SAAS,KADb;;AAGA,aAAO;AACL,oBADK;AAEL,sBAFK;AAGL,sBAAc,KAAK;AAHd,OAAP;AAKD;;;;;;;;2BAKM;AACL,aAAO,KAAK,EAAL,EAAP;AACD;;;;;;;;;yBAMI;;AAEH,UAAG,OAAO,KAAK,CAAZ,KAAkB,QAAlB,IAA8B,KAAK,CAAL,YAAkB,MAAnD,EAA2D,OAAO,IAAP;;AAE3D,aAAO;AACL,aAAK;AACH,gBAAM,YADH;AAEH,mDAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;;;wBAKG,C,EAAG;AACL,UAAG,KAAK,CAAL,CAAO,MAAP,IAAiB,CAApB,EAAuB,OAAO,IAAP;;AAEvB,aAAO;AACL,aAAK;AACH,gBAAM,UADH;AAEH,qEAAyD,CAAzD,MAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;;;wBAKG,C,EAAG;AACL,UAAG,KAAK,CAAL,CAAO,MAAP,IAAiB,CAApB,EAAuB,OAAO,IAAP;;AAEvB,aAAO;AACL,aAAK;AACH,gBAAM,WADH;AAEH,4EAAgE,CAAhE,MAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;kBAIY,e","file":"string.js","sourcesContent":["import RootValidator from './root'\n\n/**\n * @desc Determines what is or is not a String\n */\nclass StringValidator extends RootValidator {\n\n  constructor(i, options = {}) {\n    super(i, options)\n\n    return this.validate()\n  }\n\n  /**\n   * Whether or not the string contains a subset of the string\n   * @param {string} s The variable to test whether it contains the string supplied.\n   */\n  contains() {\n\n    var error  = null,\n        result = false\n\n    return {\n      error,\n      result,\n      valueChecked: this.s\n    }\n  }\n\n  /**\n   * Test whether the hash is string.\n   */\n  hash() {\n    return this.is()\n  }\n\n  /**\n   * Test whether it is a string.\n   * @see http://stackoverflow.com/a/9436948/586131\n   */\n  is() {\n\n    if(typeof this.i === 'string' || this.i instanceof String) return this\n\n    return {\n      err: {\n        code: 'NOT_STRING',\n        desc: `The item checked is not a string.`,\n        valueChecked: this.i\n      }\n    }\n  }\n\n  /**\n   * @param {number} l The maximum length the string must be.\n   */\n  max(l) {\n    if(this.i.length <= l) return this\n\n    return {\n      err: {\n        code: 'TOO_LONG',\n        desc: `The string is too long; it must be a maximum of ${l}.`,\n        valueChecked: this.i\n      }\n    }\n  }\n\n  /**\n   * @param {number} l The minimum length the string must be.\n   */\n  min(l) {\n    if(this.i.length >= l) return this\n\n    return {\n      err: {\n        code: 'TOO_SHORT',\n        desc: `The string is not long enough; it must be a minimum of ${l}.`,\n        valueChecked: this.i\n      }\n    }\n  }\n\n}\n\nexport default StringValidator\n"]}