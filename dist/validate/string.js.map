{"version":3,"sources":["../../src/validate/string.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;IAKM,e;AAEJ,2BAAY,CAAZ,EAA6B;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AAAA;;AAC3B,SAAK,CAAL,GAAe,CAAf;AACA,SAAK,OAAL,GAAe,OAAf;;AAEA,WAAO,KAAK,QAAL,EAAP;AACD;;;;;;;;;;+BAMU;;AAET,UAAI,QAAS,IAAb;UACI,SAAS,KADb;;AAGA,aAAO;AACL,oBADK;AAEL,sBAFK;AAGL,sBAAc,KAAK;AAHd,OAAP;AAKD;;;;;;;;;yBAMI;;AAEH,UAAG,OAAO,KAAK,CAAZ,KAAkB,QAAlB,IAA8B,KAAK,CAAL,YAAkB,MAAnD,EAA2D,OAAO,IAAP;;AAE3D,aAAO;AACL,aAAK;AACH,gBAAM,YADH;AAEH,mDAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;;;wBAKG,C,EAAG;AACL,UAAG,KAAK,CAAL,CAAO,MAAP,IAAiB,CAApB,EAAuB,OAAO,IAAP;;AAEvB,aAAO;AACL,aAAK;AACH,gBAAM,UADH;AAEH,qEAAyD,CAAzD,MAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;;;wBAKG,C,EAAG;AACL,UAAG,KAAK,CAAL,CAAO,MAAP,IAAiB,CAApB,EAAuB,OAAO,IAAP;;AAEvB,aAAO;AACL,aAAK;AACH,gBAAM,WADH;AAEH,4EAAgE,CAAhE,MAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;;;6BAKQ,E,EAAI;AAAA;;AAEX,UAAI,KAAK,KAAK,EAAL,EAAT;AACA,UAAG,GAAG,GAAN,EAAW,OAAO,EAAP;;AAEX,UAAI,UAAU,EAAd;;AAEA,aAAO,IAAP,CAAY,KAAK,OAAjB,EAA0B,OAA1B,CAAmC,UAAC,IAAD,EAAU;;AAE3C,YAAI,SAAS,MAAK,IAAL,EAAW,MAAK,OAAL,CAAa,IAAb,CAAX,CAAb;;AAEA,YAAG,OAAO,GAAV,EAAe;AACb,iBAAO,GAAP,CAAW,OAAX,GAAqB,IAArB;AACA,kBAAQ,IAAR,CAAa,OAAO,GAApB;AACD;AAEF,OATD;;AAWA,UAAG,QAAQ,MAAR,IAAkB,CAArB,EAAwB;AACtB,YAAG,EAAH,EAAO,OAAO,GAAG,IAAH,EAAS,IAAT,CAAP;;AAEP,eAAO,EAAC,OAAO,IAAR,EAAP;AACD;;AAED,UAAG,EAAH,EAAO,OAAO,GAAG,OAAH,CAAP;;AAEP,aAAO;AACL,aAAK;AADA,OAAP;AAID;;;;;;kBAIY,e","file":"string.js","sourcesContent":["'use strict';\n\n/**\n * @desc Determines what is or is not a String\n */\nclass StringValidator {\n\n  constructor(s, options = {}) {\n    this.s       = s\n    this.options = options\n\n    return this.validate()\n  }\n\n  /**\n   * Whether or not the string contains a subset of the string\n   * @param {string} s The variable to test whether it contains the string supplied.\n   */\n  contains() {\n\n    var error  = null,\n        result = false\n\n    return {\n      error,\n      result,\n      valueChecked: this.s\n    }\n  }\n\n  /**\n   * Test whether it is a string.\n   * @see http://stackoverflow.com/a/9436948/586131\n   */\n  is() {\n\n    if(typeof this.s === 'string' || this.s instanceof String) return this\n\n    return {\n      err: {\n        code: 'NOT_STRING',\n        desc: `The item checked is not a string.`,\n        valueChecked: this.s\n      }\n    }\n  }\n\n  /**\n   * @param {number} l The maximum length the string must be.\n   */\n  max(l) {\n    if(this.s.length <= l) return this\n\n    return {\n      err: {\n        code: 'TOO_LONG',\n        desc: `The string is too long; it must be a maximum of ${l}.`,\n        valueChecked: this.s\n      }\n    }\n  }\n\n  /**\n   * @param {number} l The minimum length the string must be.\n   */\n  min(l) {\n    if(this.s.length >= l) return this\n\n    return {\n      err: {\n        code: 'TOO_SHORT',\n        desc: `The string is not long enough; it must be a minimum of ${l}.`,\n        valueChecked: this.s\n      }\n    }\n  }\n\n  /**\n   * Validate the rules passed.\n   */\n  validate(cb) {\n\n    var is = this.is()\n    if(is.err) return is\n\n    var results = []\n\n    Object.keys(this.options).forEach( (rule) => {\n\n      let result = this[rule](this.options[rule])\n\n      if(result.err) {\n        result.err.ruleKey = rule\n        results.push(result.err)\n      }\n\n    })\n\n    if(results.length == 0) {\n      if(cb) return cb(null, true)\n\n      return {valid: true}\n    }\n\n    if(cb) return cb(results)\n\n    return {\n      err: results\n    }\n\n  }\n\n}\n\nexport default StringValidator\n"]}