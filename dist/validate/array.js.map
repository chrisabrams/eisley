{"version":3,"sources":["../../src/validate/array.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;IAKM,c;;;AAEJ,0BAAY,CAAZ,EAA6B;AAAA;;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AAAA;;AAAA,kGACrB,CADqB,EAClB,OADkB;;AAG3B,kBAAO,MAAK,QAAL,EAAP;AACD;;;;;;;;;;6BAMQ,C,EAAG;;AAEV,UAAG,KAAK,CAAL,CAAO,OAAP,CAAe,CAAf,IAAoB,CAAC,CAAxB,EAA2B,OAAO,IAAP;;AAE3B,aAAO;AACL,aAAK;AACH,gBAAM,aADH;AAEH,gDAAoC,CAApC,MAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;;;yBAKI;;AAEH,UAAG,KAAK,CAAL,YAAkB,KAArB,EAA4B,OAAO,IAAP;;AAE5B,aAAO;AACL,aAAK;AACH,gBAAM,WADH;AAEH,mDAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;;;wBAKG,C,EAAG;AACL,UAAG,KAAK,CAAL,CAAO,MAAP,IAAiB,CAApB,EAAuB,OAAO,IAAP;;AAEvB,aAAO;AACL,aAAK;AACH,gBAAM,UADH;AAEH,oEAAwD,CAAxD,MAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;;;wBAKG,C,EAAG;AACL,UAAG,KAAK,CAAL,CAAO,MAAP,IAAiB,CAApB,EAAuB,OAAO,IAAP;;AAEvB,aAAO;AACL,aAAK;AACH,gBAAM,WADH;AAEH,2EAA+D,CAA/D,MAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;kBAIY,c","file":"array.js","sourcesContent":["import RootValidator from './root'\n\n/**\n * @desc Determines whether is an Array\n */\nclass ArrayValidator extends RootValidator {\n\n  constructor(i, options = {}) {\n    super(i, options)\n\n    return this.validate()\n  }\n\n  /**\n   * Whether or not the array contains item\n   * @param {String} k - The item, or key, to check\n   */\n  contains(k) {\n\n    if(this.i.indexOf(k) > -1) return this\n\n    return {\n      err: {\n        code: 'NO_CONTAINS',\n        desc: `The item not in the array: ${k}.`,\n        valueChecked: this.i\n      }\n    }\n  }\n\n  /**\n   * Test whether it is a an array\n   */\n  is() {\n\n    if(this.i instanceof Array) return this\n\n    return {\n      err: {\n        code: 'NOT_ARRAY',\n        desc: `The item checked is not an array.`,\n        valueChecked: this.i\n      }\n    }\n  }\n\n  /**\n   * @param {number} l The maximum length the array must be.\n   */\n  max(l) {\n    if(this.i.length <= l) return this\n\n    return {\n      err: {\n        code: 'TOO_LONG',\n        desc: `The array is too long; it must be a maximum of ${l}.`,\n        valueChecked: this.i\n      }\n    }\n  }\n\n  /**\n   * @param {number} l The minimum length the array must be.\n   */\n  min(l) {\n    if(this.i.length >= l) return this\n\n    return {\n      err: {\n        code: 'TOO_SHORT',\n        desc: `The array is not long enough; it must be a minimum of ${l}.`,\n        valueChecked: this.i\n      }\n    }\n  }\n\n}\n\nexport default ArrayValidator\n"]}