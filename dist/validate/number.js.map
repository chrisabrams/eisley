{"version":3,"sources":["../../src/validate/number.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;IAKM,e;;;AAEJ,2BAAY,CAAZ,EAA6B;AAAA;;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AAAA;;AAAA,mGACrB,CADqB,EAClB,OADkB;;AAG3B,kBAAO,MAAK,QAAL,EAAP;AACD;;;;;;;;;yBAKI;;AAEH,UAAG,OAAO,KAAK,CAAZ,KAAkB,QAAlB,IAA8B,KAAK,CAAL,YAAkB,MAAnD,EAA2D,OAAO,IAAP;;AAE3D,aAAO;AACL,aAAK;AACH,gBAAM,YADH;AAEH,mDAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;;;wBAKG,C,EAAG;AACL,UAAG,KAAK,CAAL,IAAU,CAAb,EAAgB,OAAO,IAAP;;AAEhB,aAAO;AACL,aAAK;AACH,gBAAM,UADH;AAEH,qEAAyD,CAAzD,MAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;;;wBAKG,C,EAAG;AACL,UAAG,KAAK,CAAL,IAAU,CAAb,EAAgB,OAAO,IAAP;;AAEhB,aAAO;AACL,aAAK;AACH,gBAAM,WADH;AAEH,4EAAgE,CAAhE,MAFG;AAGH,wBAAc,KAAK;AAHhB;AADA,OAAP;AAOD;;;;;;kBAIY,e","file":"number.js","sourcesContent":["import RootValidator from './root'\n\n/**\n * @desc Determines what is or is not a Number\n */\nclass NumberValidator extends RootValidator {\n\n  constructor(i, options = {}) {\n    super(i, options)\n\n    return this.validate()\n  }\n\n  /**\n   * Test whether it is a number.\n   */\n  is() {\n\n    if(typeof this.i === 'number' || this.i instanceof Number) return this\n\n    return {\n      err: {\n        code: 'NOT_NUMBER',\n        desc: `The item checked is not a number.`,\n        valueChecked: this.i\n      }\n    }\n  }\n\n  /**\n   * @param {number} l The maximum length the number must be.\n   */\n  max(l) {\n    if(this.i <= l) return this\n\n    return {\n      err: {\n        code: 'TOO_LONG',\n        desc: `The number is too long; it must be a maximum of ${l}.`,\n        valueChecked: this.i\n      }\n    }\n  }\n\n  /**\n   * @param {number} l The minimum length the number must be.\n   */\n  min(l) {\n    if(this.i >= l) return this\n\n    return {\n      err: {\n        code: 'TOO_SHORT',\n        desc: `The number is not long enough; it must be a minimum of ${l}.`,\n        valueChecked: this.i\n      }\n    }\n  }\n\n}\n\nexport default NumberValidator\n"]}