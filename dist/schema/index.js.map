{"version":3,"sources":["../../src/schema/index.js"],"names":[],"mappings":";;;;;;;;;;IAAM,M;AAEJ,kBAAY,MAAZ,EAAkC;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AAAA;;AAChC,SAAK,OAAL,GAAe,OAAO,MAAP,CAAc,EAAd,EAAkB;AAC/B,cAAQ;AADuB,KAAlB,EAEZ,OAFY,CAAf;;AAIA,SAAK,MAAL,GAAe,MAAf;AACD;;;;;;;;;;;+BAOkB;AAAA;;AAAA,UAAV,GAAU,yDAAJ,EAAI;;;AAEjB,UAAI,MAAM,SAAV;;;AAGA,aAAO,IAAP,CAAY,KAAK,MAAjB,EAAyB,OAAzB,CAAkC,UAAC,GAAD,EAAS;;;AAGzC,YAAG,CAAC,MAAK,OAAL,CAAa,MAAd,IAAwB,CAAC,IAAI,GAAJ,CAA5B,EAAsC;;AAEtC,YAAI,aAAiB,MAAK,MAAL,CAAY,GAAZ,CAArB;AACA,YAAI,iBAAiB,WAAW,IAAhC;;AAEA,YAAI,SAAS,WAAW,cAAX,EAA2B,IAAI,GAAJ,CAA3B,CAAb;;AAEA,YAAG,OAAO,GAAV,EAAe;AACb,cAAG,CAAC,GAAJ,EAAS,MAAM,EAAN;;AAET,cAAI,IAAJ,CAAS;AACP,uBAAW,GADJ;AAEP,mBAAO,OAAO;AAFP,WAAT;AAID;AAEF,OAnBD;;AAqBA,aAAO;AACL;AADK,OAAP;AAID;;;;;;kBAIY,M","file":"index.js","sourcesContent":["class Schema {\n\n  constructor(schema, options = {}) {\n    this.options = Object.assign({}, {\n      strict: true\n    }, options)\n\n    this.schema  = schema\n  }\n\n  /**\n   * Takes a pkg and determines if it is valid.\n   * @param {object} pkg The object to determine if it matches the schema.\n   * @todo Schema should support nested objects\n   */\n  validate(pkg = {}) {\n\n    var err = undefined\n\n    // For each schema rule\n    Object.keys(this.schema).forEach( (key) => {\n\n      // If schema is not strict & the package is missing the property\n      if(!this.options.strict && !pkg[key]) return\n\n      var schemaRule     = this.schema[key]\n      let schemaDataType = schemaRule.type\n\n      var result = schemaRule[schemaDataType](pkg[key])\n\n      if(result.err) {\n        if(!err) err = []\n\n        err.push({\n          schemaKey: key,\n          error: result.err\n        })\n      }\n\n    })\n\n    return {\n      err\n    }\n\n  }\n\n}\n\nexport default Schema\n"]}