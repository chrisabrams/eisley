{"version":3,"sources":["../../src/schema/index.js"],"names":[],"mappings":"AAAA;;;;;;;;;;IAEM,M;AAEJ,kBAAY,MAAZ,EAAkC;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AAAA;;AAChC,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,MAAL,GAAe,MAAf;AACD;;;;;;;;;;;;+BAQsB;AAAA;;AAAA,UAAd,GAAc,yDAAR,EAAQ;AAAA,UAAJ,EAAI;;;AAErB,UAAI,MAAM,SAAV;;;AAGA,aAAO,IAAP,CAAY,KAAK,MAAjB,EAAyB,OAAzB,CAAkC,UAAC,GAAD,EAAS;;AAEzC,YAAI,aAAiB,MAAK,MAAL,CAAY,GAAZ,CAArB;AACA,YAAI,iBAAiB,WAAW,IAAhC;;AAEA,YAAI,SAAS,WAAW,cAAX,EAA2B,IAAI,GAAJ,CAA3B,CAAb;;AAEA,YAAG,OAAO,GAAV,EAAe;AACb,cAAG,CAAC,GAAJ,EAAS,MAAM,EAAN;;AAET,cAAI,IAAJ,CAAS;AACP,uBAAW,GADJ;AAEP,mBAAO,OAAO;AAFP,WAAT;AAID;AAEF,OAhBD;;AAkBA,UAAG,MAAM,OAAO,EAAP,IAAa,UAAtB,EAAkC;AAChC,YAAG,GAAH,EAAQ,OAAO,GAAG,GAAH,CAAP;;AAER,eAAO,GAAG,IAAH,EAAS,IAAT,CAAP;AACD;;AAED,aAAO;AACL;AADK,OAAP;AAID;;;;;;kBAIY,M","file":"index.js","sourcesContent":["'use strict';\n\nclass Schema {\n\n  constructor(schema, options = {}) {\n    this.options = options\n    this.schema  = schema\n  }\n\n  /**\n   * Takes a pkg and determines if it is valid.\n   * @param {object} pkg The object to determine if it matches the schema.\n   * @todo Schema should be able to be any primitive type\n   * @todo Schema should support nested objects\n   */\n  validate(pkg = {}, cb) {\n\n    var err = undefined\n\n    // For each schema rule\n    Object.keys(this.schema).forEach( (key) => {\n\n      var schemaRule     = this.schema[key]\n      let schemaDataType = schemaRule.type\n\n      var result = schemaRule[schemaDataType](pkg[key])\n\n      if(result.err) {\n        if(!err) err = []\n\n        err.push({\n          schemaKey: key,\n          error: result.err\n        })\n      }\n\n    })\n\n    if(cb && typeof cb == 'function') {\n      if(err) return cb(err)\n\n      return cb(null, true)\n    }\n\n    return {\n      err\n    }\n\n  }\n\n}\n\nexport default Schema\n"]}